---
---

/*============================================================================
  Shopify Timber
  Copyright 2015 Shopify Inc.
  Author Carson Shold @cshold
  Built with Sass - http://sass-lang.com/

  Some things to know about this file:
    - Sass is compiled on Shopify's server so you don't need to convert it to CSS yourself
    - The output CSS is compressed and comments are removed
    - You cannot use @imports in this file
        * Use grunt or gulp tasks to enable @imports - https://github.com/Shopify/shopify-css-import
    - Helpers variables, mixins, and starter classes are provided. Change as needed.
    - The file is prepped with a CSS reset
    - The font icons are prepared using https://icomoon.io/app
==============================================================================*/

/*============================================================================
  Table of Contents

  #Breakpoint and Grid Variables
  #General Variables
  #Sass Mixins
  #Normalize
  #Grid Setup
  #Basic Styles
  #Helper Classes
  #Typography
  #Rich Text Editor
  #Links and Buttons
  #Lists
  #Tables
  #Reponsive Tables
  #OOCSS Media Object
  #Images and Iframes
  #Forms
  #Icons
  #Pagination
  #Site Header
  #Site Nav and Dropdowns
  #Mobile Nav
  #Drawers
  #Site Footer
  #Product and Collection Grids
  #Collection Filters
  #Breadcrumbs
  #Product Page
  #Notes and Form Feedback
  #Cart Page
  #Ajax Cart Styles
==============================================================================*/

$color-primary: #33AC88;
$color-primary-alt: #4D8381;
$color-dark-gray: #434344;
$color-gray: #818181;
$color-light-gray: #c7c7c7;

$color-very-light-gray: #efefef;

$color-border: $color-light-gray;

$transition-hover: .15s ease 0s;


$default-easing: cubic-bezier(0.770, 0.000, 0.175, 1.000);
$animation-duration: 15s;

$color-c: #cbcbcb;
$color-80: #333333;

$color-error: #5F2A2B;



/*============================================================================
  #Breakpoint and Grid Variables
==============================================================================*/
$viewportIncrement: 1px;

$small: 480px;
$medium: 565px;
$large: 566px;


$desktop: 850px;
$desktop-1: $desktop - 1;
// IF YOU CHANGE THIS, And referral active, change the JS window responsive width in progress bar controller, for KickOffLbas Share page.


$postSmall: $small + $viewportIncrement;
$preMedium: $medium - $viewportIncrement;
$preLarge: $large - $viewportIncrement;

/*================ The following are dependencies of csswizardry grid ================*/
$breakpoints: (
  'small' '(max-width: #{$small})',
  'medium' '(min-width: #{$postSmall}) and (max-width: #{$medium})',
  'medium-down' '(max-width: #{$medium})',
  'large' '(min-width: #{$large})'
);
$breakpoint-has-widths: ('small', 'medium', 'medium-down', 'large');
$breakpoint-has-push:  ('medium', 'medium-down', 'large');
$breakpoint-has-pull:  ('medium', 'medium-down', 'large');

/*============================================================================
  #General Variables
==============================================================================*/


// Sizing variables
$siteWidth: 1180px;
$gutter: 30px;
$gridGutter: 30px; // can be a %, but nested grids will have smaller margins because of it
$radius: 3px;

// Z-index
$zindexNavDropdowns: 5;
$zindexDrawer: 10;

/*================ Typography ================*/

$headerFontStack: 'HelveticaNeue', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$headerFontWeight: 700;

$bodyFontStack: 'HelveticaNeue', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$baseFontSize: 14px; // Henseforth known as 1em

@font-face {
  font-family: 'icons';
  src: url('{{ "icons.eot" | asset_url }}');
  src: url('{{ "icons.eot" | asset_url }}#iefix') format("embedded-opentype"),
       url('{{ "icons.woff" | asset_url }}') format("woff"),
       url('{{ "icons.ttf" | asset_url }}') format("truetype"),
       url('{{ "icons.svg" | asset_url }}#timber-icons') format("svg");
  font-weight: normal;
  font-style: normal;
}
$socialIconFontStack: 'icons';

/* This stylesheet generated by Transfonter (http://transfonter.org) on February 4, 2016 7:45 PM */

// @font-face {
//   font-family: 'Calibre';
//   src: url('Calibre-Semibold.eot');
//   src: url('Calibre-Semibold.eot?#iefix') format('embedded-opentype'),
//     url('Calibre-Semibold.woff') format('woff'),
//     url('Calibre-Semibold.ttf') format('truetype');
//   font-weight: 500;
//   font-style: normal;
// }

// @font-face {
//     font-family: 'C';
//     src: url('c-l-webfont.eot');
//     src: url('c-l-webfont.eot?#iefix') format('embedded-opentype'),
//          url('c-l-webfont.woff2') format('woff2'),
//          url('c-l-webfont.woff') format('woff'),
//          url('c-l-webfont.ttf') format('truetype'),
//          url('c-l-webfont.svg#C') format('svg');
//     font-weight: normal;
//     font-style: normal;
// }

// @font-face {
//     font-family: 'C';
//     src: url('c-sb-webfont.eot');
//     src: url('c-sb-webfont.eot?#iefix') format('embedded-opentype'),
//          url('c-sb-webfont.woff2') format('woff2'),
//          url('c-sb-webfont.woff') format('woff'),
//          url('c-sb-webfont.ttf') format('truetype'),
//          url('c-sb-webfont.svg#C') format('svg');
//     font-weight: 500;
//     font-style: normal;
// }

    // .isolation-g#{$i}-#{$start}-no-pad {
@mixin font-face($filename-without-extension, $name, $weight: 'normal', $style: 'normal') {
  @font-face {
      font-family: $name;
      src: url('#{$filename-without-extension}.eot');
      src: url('#{$filename-without-extension}.eot?#iefix') format('embedded-opentype'),
           url('#{$filename-without-extension}.woff2') format('woff2'),
           url('#{$filename-without-extension}.woff') format('woff'),
           url('#{$filename-without-extension}.ttf') format('truetype'),
           url('#{$filename-without-extension}.svg#C') format('svg');
      font-weight: $weight;
      font-style: $style;
  }
}

@include font-face('apercu_light', 'Apercu', 'normal', 'normal');

@font-face {
    font-family: 'Apercu';
    src: url('apercu_bold.eot');
    src: url('apercu_bold.eot?#iefix') format('embedded-opentype'),
         url('apercu_bold.woff2') format('woff2'),
         url('apercu_bold.woff') format('woff'),
         url('apercu_bold.ttf') format('truetype'),
         url('apercu_bold.svg#C') format('svg');
    font-weight: bold;
    font-style: normal;
}
/*============================================================================
  #Sass Mixins
==============================================================================*/
.clearfix {
  &:after {
    content: '';
    display: table;
    clear: both; }
  *zoom: 1;
}

@mixin clearfix() {
  &:after {
    content: '';
    display: table;
    clear: both; }
  *zoom: 1;
}

/*============================================================================
  Prefixer mixin for generating vendor prefixes:
    - Based on https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_prefixer.scss
    - Usage:

      // Input:
      .element {
        @include prefixer(transform, scale(1), ms webkit spec);
      }

      // Output:
      .element {
        -ms-transform: scale(1);
        -webkit-transform: scale(1);
        transform: scale(1);
      }
==============================================================================*/

@mixin prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      -webkit-#{$property}: $value;
    } @else if $prefix == moz {
      -moz-#{$property}: $value;
    } @else if $prefix == ms {
      -ms-#{$property}: $value;
    } @else if $prefix == o {
      -o-#{$property}: $value;
    } @else if $prefix == spec {
      #{$property}: $value;
    } @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin transform($transform) {
  @include prefixer(transform, $transform, ms webkit spec);
}

@mixin user-select($value: none) {
  @include prefixer(user-select, $value, webkit moz ms spec);
}

@mixin backface($visibility: hidden) {
  @include prefixer(backface-visibility, $visibility, webkit spec);
}

@function em($target, $context: $baseFontSize) {
  @if $target == 0 {
    @return 0;
  }
  @return $target / $context + 0em;
}

@function color-control($color) {
  @if (lightness( $color ) > 40) {
    @return #000;
  }
  @else {
    @return #fff;
  }
}

/*============================================================================
  Layer promotion mixin for creating smoother animations with higher FPS.
==============================================================================*/
@mixin promote-layer($properties: transform) {
  -webkit-transform: translateZ(0); // translateZ hack
  will-change: $properties; // spec
}

/*============================================================================
  Dependency-free breakpoint mixin
    - Based on http://blog.grayghostvisuals.com/sass/sass-media-query-mixin/
    - Usage docs: http://shopify.github.io/Timber/#sass-mixins
==============================================================================*/
$min: min-width;
$max: max-width;
@mixin at-query ($constraint_, $viewport1_, $viewport2_:null) {
 $constraint: $constraint_; $viewport1: $viewport1_; $viewport2: $viewport2_;
  @if type-of($constraint_) == number {
    $viewport1 : $constraint_; $viewport2 : $viewport1_; $constraint : null;
  }
  @if $constraint == $min {
    @media screen and ($min: $viewport1) {
      @content;
    }
  } @else if $constraint == $max {
    @media screen and ($max: $viewport1) {
      @content;
    }
  } @else {
    @media screen and ($min: $viewport1) and ($max: $viewport2) {
      @content;
    }
  }
}

@mixin rm {
  @include at-query($max, $desktop-1) {
    @content;
  }
}

@mixin rd {
  @include at-query($min, $desktop) {
    @content;
  }
}
.hide-on-mobile {
  @include rm {
    display: none;
  }
}
.hide-on-desktop {
  @include rd {
    display: none;
  }
}


/*============================================================================
  #Normalize
==============================================================================*/
*, input, :before, :after {
  box-sizing: border-box;
}

html, body {
  padding: 0;
  margin: 0;
}

html.navbar-mobile-open {
  position: relative;
  height: 100%;
  overflow: hidden;

  body {
    position: relative;
    height: 100%;
    overflow: hidden;
  }

}

article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
  display: block;
}

audio, canvas, progress, video {
  display: inline-block;
  vertical-align: baseline;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*============================================================================
  #Grid Setup
    - Based on csswizardry grid, but with floated columns, a fixed gutter size, and BEM classes
    - Breakpoints defined above, under #Breakpoint and Grid Variables
    - Note the inclusion of .grid-uniform to take care of clearfixes on evenly sized grid items
==============================================================================*/
$responsive:         true;
$mobile-first:       true;
$use-silent-classes: false;
$push:               true;
$pull:               false;

/* Force clearfix on grids */
.grid,
.grid-uniform {
  @include clearfix;
}

/* Manual grid__item clearfix */
.grid__item.clear {
  clear: both;
}

$class-type: unquote(".");

@if $use-silent-classes == true {
  $class-type: unquote("%");
}

@mixin grid-media-query($media-query) {
  $breakpoint-found: false;

  @each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $media-query == $name and $declaration {
      $breakpoint-found: true;

      @media only screen and #{$declaration} {
        @content;
      }
    }
  }

  @if $breakpoint-found == false {
    @warn "Breakpoint '#{$media-query}' does not exist";
  }
}


/*============================================================================
  Drop relative positioning into silent classes which can't take advantage of
  the `[class*="push--"]` and `[class*="pull--"]` selectors.
==============================================================================*/
@mixin silent-relative() {
  @if $use-silent-classes == true {
    position:relative;
  }
}

/*============================================================================
  Grid Setup
    1. Allow the grid system to be used on lists.
    2. Remove any margins and paddings that might affect the grid system.
    3. Apply a negative `margin-left` to negate the columns' gutters.
==============================================================================*/
#{$class-type}grid,
#{$class-type}grid-uniform {
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -$gridGutter;
}

#{$class-type}grid__item {
  box-sizing: border-box;
  float: left;
  min-height: 1px;
  padding-left: $gridGutter;
  vertical-align: top;
  @if $mobile-first == true {
    width: 100%;
  }
}

/*============================================================================
  Reversed grids allow you to structure your source in the opposite
  order to how your rendered layout will appear.
==============================================================================*/
#{$class-type}grid--rev {
  @extend #{$class-type}grid;
  direction: rtl;
  text-align: left;

  > #{$class-type}grid__item {
    direction: ltr;
    text-align: left;
    float: right;
  }
}

/* Gutterless grids have all the properties of regular grids, minus any spacing. */
#{$class-type}grid--full {
  @extend #{$class-type}grid;
  margin-left: 0;

  > #{$class-type}grid__item {
    padding-left: 0;
  }
}

/*============================================================================
  WIDTHS
    - Create width classes, prefixed by the specified namespace.
==============================================================================*/
@mixin device-type($namespace:"") {
  /** Whole */
  #{$class-type}#{$namespace}one-whole       { width: 100%; }

  /* Halves */
  #{$class-type}#{$namespace}one-half        { width: 50%; }

  /* Thirds */
  #{$class-type}#{$namespace}one-third       { width: 33.333%; }
  #{$class-type}#{$namespace}two-thirds      { width: 66.666%; }

  /* Quarters */
  #{$class-type}#{$namespace}one-quarter     { width: 25%; }
  #{$class-type}#{$namespace}two-quarters    { width: 50%; }
  #{$class-type}#{$namespace}three-quarters  { width: 75%; }

  /* Fifths */
  #{$class-type}#{$namespace}one-fifth       { width: 20%; }
  #{$class-type}#{$namespace}two-fifths      { width: 40%; }
  #{$class-type}#{$namespace}three-fifths    { width: 60%; }
  #{$class-type}#{$namespace}four-fifths     { width: 80%; }

  /* Sixths */
  #{$class-type}#{$namespace}one-sixth       { width: 16.666%; }
  #{$class-type}#{$namespace}two-sixths      { width: 33.333%; }
  #{$class-type}#{$namespace}three-sixths    { width: 50%; }
  #{$class-type}#{$namespace}four-sixths     { width: 66.666%; }
  #{$class-type}#{$namespace}five-sixths     { width: 83.333%; }

  /* Eighths */
  #{$class-type}#{$namespace}one-eighth      { width: 12.5%; }
  #{$class-type}#{$namespace}two-eighths     { width: 25%; }
  #{$class-type}#{$namespace}three-eighths   { width: 37.5%; }
  #{$class-type}#{$namespace}four-eighths    { width: 50%; }
  #{$class-type}#{$namespace}five-eighths    { width: 62.5%; }
  #{$class-type}#{$namespace}six-eighths     { width: 75%; }
  #{$class-type}#{$namespace}seven-eighths   { width: 87.5%; }

  /* Tenths */
  #{$class-type}#{$namespace}one-tenth       { width: 10%; }
  #{$class-type}#{$namespace}two-tenths      { width: 20%; }
  #{$class-type}#{$namespace}three-tenths    { width: 30%; }
  #{$class-type}#{$namespace}four-tenths     { width: 40%; }
  #{$class-type}#{$namespace}five-tenths     { width: 50%; }
  #{$class-type}#{$namespace}six-tenths      { width: 60%; }
  #{$class-type}#{$namespace}seven-tenths    { width: 70%; }
  #{$class-type}#{$namespace}eight-tenths    { width: 80%; }
  #{$class-type}#{$namespace}nine-tenths     { width: 90%; }

  /* Twelfths */
  #{$class-type}#{$namespace}one-twelfth     { width: 8.333%; }
  #{$class-type}#{$namespace}two-twelfths    { width: 16.666%; }
  #{$class-type}#{$namespace}three-twelfths  { width: 25%; }
  #{$class-type}#{$namespace}four-twelfths   { width: 33.333%; }
  #{$class-type}#{$namespace}five-twelfths   { width: 41.666% }
  #{$class-type}#{$namespace}six-twelfths    { width: 50%; }
  #{$class-type}#{$namespace}seven-twelfths  { width: 58.333%; }
  #{$class-type}#{$namespace}eight-twelfths  { width: 66.666%; }
  #{$class-type}#{$namespace}nine-twelfths   { width: 75%; }
  #{$class-type}#{$namespace}ten-twelfths    { width: 83.333%; }
  #{$class-type}#{$namespace}eleven-twelfths { width: 91.666%; }
}

/*================ Clearfix helper on uniform grids ================*/
@mixin clearfix-helper($namespace:"") {
  .grid-uniform {
    #{$class-type}#{$namespace}one-half:nth-child(2n+1),
    #{$class-type}#{$namespace}one-third:nth-child(3n+1),
    #{$class-type}#{$namespace}one-quarter:nth-child(4n+1),
    #{$class-type}#{$namespace}one-fifth:nth-child(5n+1),
    #{$class-type}#{$namespace}one-sixth:nth-child(6n+1),
    #{$class-type}#{$namespace}two-sixths:nth-child(3n+1),
    #{$class-type}#{$namespace}three-sixths:nth-child(2n+1),
    #{$class-type}#{$namespace}two-eighths:nth-child(4n+1),
    #{$class-type}#{$namespace}four-eighths:nth-child(2n+1),
    #{$class-type}#{$namespace}five-tenths:nth-child(2n+1),
    #{$class-type}#{$namespace}one-twelfth:nth-child(12n+1),
    #{$class-type}#{$namespace}two-twelfths:nth-child(6n+1),
    #{$class-type}#{$namespace}three-twelfths:nth-child(4n+1),
    #{$class-type}#{$namespace}four-twelfths:nth-child(3n+1),
    #{$class-type}#{$namespace}six-twelfths:nth-child(2n+1)    { clear: both; }
  }
}

/*================ Helper show/hide classes around our breakpoints ================*/
@mixin device-helper($namespace:"") {
  #{$class-type}#{$namespace}show        { display: block!important; }
  #{$class-type}#{$namespace}hide        { display: none!important; }

  #{$class-type}#{$namespace}text-left   { text-align: left!important; }
  #{$class-type}#{$namespace}text-right  { text-align: right!important; }
  #{$class-type}#{$namespace}text-center { text-align: center!important; }

  #{$class-type}#{$namespace}left        { float: left!important; }
  #{$class-type}#{$namespace}right       { float: right!important; }
}

/*================ Our regular, non-responsive width and helper classes ================*/
@include device-type();
@include device-helper();

/*================ Our responsive classes, if we have enabled them ================*/
@if $responsive == true {
  @each $name in $breakpoint-has-widths {
    @include grid-media-query($name) {
      @include device-type('#{$name}--');
      @include device-helper('#{$name}--');
      @include clearfix-helper('#{$name}--');
    }
  }
}

/*============================================================================
  PUSH
    - Push classes, to move grid items over to the right by certain amounts
==============================================================================*/
@mixin push-setup($namespace: "") {
  /* Whole */
  #{$class-type}push--#{$namespace}one-whole       { left: 100%; @include silent-relative(); }

  /* Halves */
  #{$class-type}push--#{$namespace}one-half        { left: 50%; @include silent-relative(); }

  /* Thirds */
  #{$class-type}push--#{$namespace}one-third       { left: 33.333%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}two-thirds      { left: 66.666%; @include silent-relative(); }

  /* Quarters */
  #{$class-type}push--#{$namespace}one-quarter     { left: 25%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}two-quarters    { left: 50%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}three-quarters  { left: 75%; @include silent-relative(); }

  /* Fifths */
  #{$class-type}push--#{$namespace}one-fifth       { left: 20%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}two-fifths      { left: 40%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}three-fifths    { left: 60%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}four-fifths     { left: 80%; @include silent-relative(); }

  /* Sixths */
  #{$class-type}push--#{$namespace}one-sixth       { left: 16.666%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}two-sixths      { left: 33.333%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}three-sixths    { left: 50%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}four-sixths     { left: 66.666%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}five-sixths     { left: 83.333%; @include silent-relative(); }

  /* Eighths */
  #{$class-type}push--#{$namespace}one-eighth      { left: 12.5%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}two-eighths     { left: 25%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}three-eighths   { left: 37.5%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}four-eighths    { left: 50%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}five-eighths    { left: 62.5%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}six-eighths     { left: 75%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}seven-eighths   { left: 87.5%; @include silent-relative(); }

  /* Tenths */
  #{$class-type}push--#{$namespace}one-tenth       { left: 10%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}two-tenths      { left: 20%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}three-tenths    { left: 30%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}four-tenths     { left: 40%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}five-tenths     { left: 50%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}six-tenths      { left: 60%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}seven-tenths    { left: 70%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}eight-tenths    { left: 80%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}nine-tenths     { left: 90%; @include silent-relative(); }

  /* Twelfths */
  #{$class-type}push--#{$namespace}one-twelfth     { left: 8.333%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}two-twelfths    { left: 16.666%; @include silent-relative();  }
  #{$class-type}push--#{$namespace}three-twelfths  { left: 25%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}four-twelfths   { left: 33.333%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}five-twelfths   { left: 41.666%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}six-twelfths    { left: 50%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}seven-twelfths  { left: 58.333%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}eight-twelfths  { left: 66.666%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}nine-twelfths   { left: 75%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}ten-twelfths    { left: 83.333%; @include silent-relative(); }
  #{$class-type}push--#{$namespace}eleven-twelfths { left: 91.666%; @include silent-relative(); }
}

@if $push == true {
  [class*="push--"]{ position:relative; }

  @include push-setup();

  @if $responsive == true {
    @each $name in $breakpoint-has-push {
      @include grid-media-query($name) {
        @include push-setup('#{$name}--');
      }
    }
  }
}

/*============================================================================
  PULL
    - Pull classes, to move grid items back to the left by certain amounts
==============================================================================*/
@mixin pull-setup($namespace: "") {
  /* Whole */
  #{$class-type}pull--#{$namespace}one-whole       { right: 100%; @include silent-relative(); }

  /* Halves */
  #{$class-type}pull--#{$namespace}one-half        { right: 50%; @include silent-relative(); }

  /* Thirds */
  #{$class-type}pull--#{$namespace}one-third       { right: 33.333%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}two-thirds      { right: 66.666%; @include silent-relative(); }

  /* Quarters */
  #{$class-type}pull--#{$namespace}one-quarter     { right: 25%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}two-quarters    { right: 50%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}three-quarters  { right: 75%; @include silent-relative(); }

  /* Fifths */
  #{$class-type}pull--#{$namespace}one-fifth       { right: 20%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}two-fifths      { right: 40%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}three-fifths    { right: 60%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}four-fifths     { right: 80%; @include silent-relative(); }

  /* Sixths */
  #{$class-type}pull--#{$namespace}one-sixth       { right: 16.666%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}two-sixths      { right: 33.333%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}three-sixths    { right: 50%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}four-sixths     { right: 66.666%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}five-sixths     { right: 83.333%; @include silent-relative(); }

  /* Eighths */
  #{$class-type}pull--#{$namespace}one-eighth      { right: 12.5%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}two-eighths     { right: 25%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}three-eighths   { right: 37.5%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}four-eighths    { right: 50%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}five-eighths    { right: 62.5%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}six-eighths     { right: 75%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}seven-eighths   { right: 87.5%; @include silent-relative(); }

  /* Tenths */
  #{$class-type}pull--#{$namespace}one-tenth       { right: 10%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}two-tenths      { right: 20%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}three-tenths    { right: 30%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}four-tenths     { right: 40%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}five-tenths     { right: 50%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}six-tenths      { right: 60%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}seven-tenths    { right: 70%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}eight-tenths    { right: 80%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}nine-tenths     { right: 90%; @include silent-relative(); }

  /* Twelfths */
  #{$class-type}pull--#{$namespace}one-twelfth     { right: 8.333%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}two-twelfths    { right: 16.666%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}three-twelfths  { right: 25%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}four-twelfths   { right: 33.333%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}five-twelfths   { right: 41.666%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}six-twelfths    { right: 50%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}seven-twelfths  { right: 58.333%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}eight-twelfths  { right: 66.666%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}nine-twelfths   { right: 75%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}ten-twelfths    { right: 83.333%; @include silent-relative(); }
  #{$class-type}pull--#{$namespace}eleven-twelfths { right: 91.666%; @include silent-relative(); }
}

@if $pull == true {
  [class*="pull--"]{ position:relative; }

  @include pull-setup();

  @if $responsive == true {
    @each $name in $breakpoint-has-pull {
      @include grid-media-query($name) {
        @include pull-setup('#{$name}--');
      }
    }
  }
}


@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder { /* Firefox 18- */
        @content;
    }

    &::-moz-placeholder {  /* Firefox 19+ */
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

@mixin transition($value...) {
  @include prefixer(transition, $value, webkit moz o);
}

@mixin gvalign() {
  // useful method if pixellation results from translate
  white-space: nowrap;
  &:after {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%;
    width: .1px;
  }
}

@mixin gvalign-child {
	white-space: normal;
	width: 100%;
	display: inline-block;
	vertical-align: middle;
}

.gvalign {
  @include gvalign;
}
  .gvalign-child {
    @include gvalign-child;
  }

@mixin keyframe ($animation_name) {
    @-webkit-keyframes $animation_name {
        @content;
    }

    @-moz-keyframes $animation_name {
        @content;
    }

    @-o-keyframes $animation_name {
        @content;
    }

    @keyframes $animation_name {
        @content;
    }
}

@mixin animation ($delay, $duration, $animation) {
    -webkit-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-name: $animation;
    -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    -moz-animation-delay: $delay;
    -moz-animation-duration: $duration;
    -moz-animation-name: $animation;
    -moz-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    -o-animation-delay: $delay;
    -o-animation-duration: $duration;
    -o-animation-name: $animation;
    -o-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    animation-delay: $delay;
    animation-duration: $duration;
    animation-name: $animation;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}


// Our Mixins
// Our Mixins
// Our Mixins

@mixin background-size($arg) {
  @include prefixer(background-size, $arg, o webkit moz spec);
}

@mixin background-size-cover() {
  @include background-size(cover);
  background-position: center center;
}

@mixin transform($transform) {
  @include prefixer(transform, $transform, ms webkit spec);
}

@mixin transform-origin($origin) {
  @include prefixer(transform-origin, $origin, moz o ms webkit spec);
}

@mixin user-select($value: none) {
  @include prefixer(user-select, $value, webkit moz ms spec);
}

@mixin backface($visibility: hidden) {
  @include prefixer(backface-visibility, $visibility, webkit spec);
}

@mixin backface-visibility($args...) {
  @include backface($args);
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}


@mixin link-color($color, $text-decoration: null) {
  color: $color;
  @if ($text-decoration != null) {
    text-decoration: $text-decoration;
  }
  &:visited, &:active {
    color: $color;
    @if ($text-decoration != null) {
      text-decoration: $text-decoration;
    }
  }
}

// simple grid
// simple grid
// simple grid
$grid_columns: 8;

$mobile-gutter: 35px;
$desktop-gutter: 35px;

$mobile-margin: 20px;
$desktop-margin: 35px;

@mixin container {
  margin: {
    left: auto;
    right: auto;
  }
  max-width: 1500px;
  clear: both;
  @include clearfix;


  padding-left: $desktop-margin;
  padding-right: $desktop-margin;    
  @include rm {
    padding-left: $mobile-margin;
    padding-right: $mobile-margin;
  }
  @include at-query($min, 1500px) {
  }
}

@mixin max-container {
  // max only container: this container maxes out at the same max width
  max-width: 1800px;
  margin: 0 auto;
}

.container {
  @include container;
}


@mixin container-row {
  // to save tons of nested markup, use this when we only need a single container-row.
  @include container;
  // container == mobile margin
  // row == -gutter/2
  // container-row == margin - gutter/2
  @include rd {
    $margin: $desktop-margin;
    $gutter: $desktop-gutter/2;
    padding-left: $margin - $gutter;
    padding-right: $margin - $gutter;
  }
  @include rm {
    $margin: $mobile-margin;
    $gutter: $mobile-gutter/2;
    padding-left: $margin - $gutter;
    padding-right: $margin - $gutter;
  }

}

.container-row {
  @include container-row;
}

@mixin container-row-g12 {
  @include container;
}

.container-row-g12 {
  @include container-row-g12;
}

@mixin row() {
  @include clearfix;
  @include rm {
    $gutter: -1 * $mobile-gutter/2;    
    margin-left: $gutter;
    margin-right: $gutter;
  }
  @include rd {
    $gutter: -1 * $desktop-gutter/2;
    margin-left: $gutter;
    margin-right: $gutter;
  }
}

.row, .grid {
  @include row;
}
.row-no-pad {
  @include clearfix;
}


@function calculate-width($col, $grid_columns: $grid_columns) {
  @return ($col/$grid_columns) * 100%;
}

@mixin column($col, $grid_columns: $grid_columns) {
  width: calculate-width($col, $grid_columns);
  float: left;
  @include rd {  
    padding-left: $desktop-gutter/2;
    padding-right: $desktop-gutter/2;
  }
  @include rm {
    padding-left: $mobile-gutter/2;
    padding-right: $mobile-gutter/2;
  }
}

@mixin column-no-pad($col, $grid_columns: $grid_columns) {
  width: calculate-width($col, $grid_columns);
  float: left;
}

@mixin isolation-span($col-span, $start) {
  /*
  Isolation span: give column span width and start position.
  */
  $start: $start - 1;
  @include column($col-span);
  margin-left: calculate-width($start);
  margin-right: -100%;
}

@mixin isolation-span-no-pad($col-span, $start) {
  $start: $start - 1;
  @include column-no-pad($col-span);
  margin-left: calculate-width($start);
  margin-right: -100%;
}

@for $i from 1 through 12 {
  .g#{$i} {
    @include column($i);
  }
  .g#{$i}-no-pad {
    @include column-no-pad($i);
  }

  @for $start from 1 through 12 {
    .isolation-g#{$i}-#{$start} {
      @include isolation-span($i, $start);
    }
    .isolation-g#{$i}-#{$start}-no-pad {
      @include isolation-span-no-pad($i, $start);
    }
  }
}

@for $grid-columns from 4 through 12 {
  @for $col from 1 through $grid-columns {
    .col-#{$col}-#{$grid-columns} {
      @include column($col, $grid-columns);
    }
  }
}

@mixin gcenter() {
  float: none;
  margin: 0 auto;
}
.gcenter {
  @include gcenter;
  text-align: center; // for backwards compat. shouldn't force center.
}
// use inside cells
.grid-relative {
  position: relative;
}

.grid-debug-heading {
  margin: 10px 0;
  font-size: 10px;
}
.grid-debug {
  text-align: center;
  background: rgba(red, .2);
  height: 20px;
  margin-bottom: 10px;
}

// grid debug in background
.grid-debug-bg {
	position: fixed;
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
	z-index: -1;
	.grid-debug {
		height: 100vh;
		background: rgba(red, .1);
	}
}






// animations
// animations
// animations
@include keyframe(fadeInUp) {
  0% {
    @include transform(translateY(7px));
    opacity: 0;
  }
  100% {
    @include transform(translateY(0px));
    opacity: 1;
  }
}
@include keyframe(fadeInDown) {
  0% {
    @include transform(translateY(-7px));
    opacity: 0;
  }
  100% {
    @include transform(translateY(0px));
    opacity: 1;
  }
}
@include keyframe(fadeIn) {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@include keyframe(spin) {
  100% {
    @include transform(rotate(360deg));
  }
}
@include keyframe(scrollDownBounce) {
  0% {
    opacity: 0;
    @include transform(translateY(-10px));
  }
  40% {
    opacity: 1;
    @include transform(translateY(0px));
  }
  60% {
    opacity: 0;
    @include transform(translateY(0px));
  }
  100% {
    opacity: 0;
    @include transform(translateY(0px));
  }
}

.animation-fadeInUp {
  @include animation(0s, .4s, fadeInUp);
}

@function global-grid($target-columns, $nested-columns) {
	// get a global grid size in a nested column.
	// i.e. 2 columns inside of a 6 column container, that is equal to the width of 2 columns in a root level container.
	// math is $target-columns/$grid-columns * $grid-column/$nested
	$target-percentage: $target-columns/$grid-columns;
	$nested-columns-percentage: $grid-columns/$nested-columns;

	@return ($target-percentage * $nested-columns-percentage)*100%;
}


.navbar {
	// @include column-no-pad(2);
	// padding-left: $desktop-margin;
	@include container-row;
	position: fixed;
	left: 0;
	top: 0;
	bottom: 0;
	right: 0;
	z-index: 1;
}
.navbar__column {
	// @include column(4);
	height: 100vh;
	// background: rgba(red, .1);
	@include gvalign;
	&:first-child {
		@include isolation-span(1, 1);
	}
	&:last-child {
		@include isolation-span(1, 2);
	}
}

.navbar__valign {
	@include gvalign-child;
	background: rgba(black, .05);
}
.navbar__link {
	display: block;
	text-decoration: none;
	padding: 2px 0;
	text-decoration: none;
	font-size: 14px;
}
.navbar__logo {
	position: absolute;
	top: 35px;
	left: 35px;
}

//content
//content
//content
.content-wrapper {
	@include container-row;
}
.content-grid-spacer {
	@include column(2);
}
.content {
	// @include column(6);
	z-index: 2;
	position: relative;
	// @include isolation-span(6, 3);
	min-height: 90vh;

}

.primary-slide {
	height: 100vh;
	padding: 60px 0;
}
//index
//index
//index
.index-swiper {
	@include column(6);
}

//footer
//footer
//footer
.footer {
	background: white;
	position: relative;
	z-index: 3;
	margin-top: 300px;
	padding-top: 65px;
	padding-bottom: 35px;
	@include container-row;
}
.footer__contact {
	@include column(1);
}
.footer__address1 {
	@include column(1);
}
.footer__address2 {
	@include column(1);
}
.footer__spacer {
	@include column(1);
}
.footer__email {
	@include column(3);
}


// .g2-in-g6 {
// 	width: global-grid(2, 6);
// 	float: left;
// 	padding: 0 $desktop-gutter/2;
// }